# Git

# initialize a git repo (creates a .git folder in that directory)

git init

git status                 :- gives info about branch name, Untracked files etc
git add file_name          :- adds the file to staging area 
git commit -m "message"    :- commits the added files with given "message"
git log                    :- gives the history of commits
                              latest commit always appears at top

git revert -n (first 7 digits of commit in git log)  :- reverts back to previous commit
                                                        -n flag means not to commit (if it is not there, it gets commited automatically)
                                                        example = git revert (first 7 digits of commit in git log)

git revert HEAD :- reverts back to last commit we made

git reset (first 7 digits of commit in git log) --hard :-reset removes the commit history.it would take back to the commit no input
                                                       :-  --hard applies that reset should be applied to files as well as commit history

git reset HEAD~1 --hard :- HEAD always latest commit. HEAD~1 means the one commit before HEAD.


git branch :- lists all the branches of the repo

git branch branch_name  :- creates a branch without checking into the branch

git checkout branch_name :- changes the working branch into the name of the branch you specify

git checkout -b branch_name :- creates a branch 

git checkout -d branch_name :- deletes a branch

git merge branch_name :- merges the branch into the master (you have to be on master branch to run merge)

git remote add origin git_url  :- adds the local repo to remote repo

git push -u origin master  :- pushes the local code to the remote 
                              -u flag is to track the all the branches we push and next we could directly use git push

git push --all origin  :- pushes all the local branches to the remote

git pull origin master :- pull down all the changes to the local repo

git clone repo_url  :- clones the remote repo to the local (cloning is making another local repo of remote repo)

forking is making another remote repository

to fork a repo , just click on the fork button in any repo , you want

to ignore files to be pushed to remote
-- create a .gitignore file
add the file name like ignore.txt to .gitignore

stash is mostly used to save our local changes temporarily 

git stash save -- will save our local changes like a commit --->>>git pull origin master will pull the remote changes and then 

git stash pop -- will pop our changes that are saved earlier 

Rebase

git rebase and git merge are a bit similar but in git rebase the base of branch starts at the commit we chose
due to this, we can notice there is no history (difficult to track). git rebase is preferred if there is a single contributor 
to the repo. it is good to not use git rebase when there are more contributors as tracking is difficult.

git squash is used to simplify the commits into a single commit. (not usable when there are other colloborators)

how to git squash


-- git rebase -i HEAD~n (n -- the number of commits we want to simplify)


this create an initial file 
-- you have to choose and pick and squash depending on the changes we need
-- in the next file you have to choose a name for the squash commit (rename it into all the commits separated by comma)


